name: 🚀 Deploy Backend to Elastic Beanstalk

on:
  push:
    tags: ['v*']  # Trigger apenas em TAGs
  workflow_dispatch: # Permite trigger manual

jobs:
  deploy-backend:
    name: 🏗️ Deploy Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: 🛠️ Install EB CLI
      run: |
        pip install awsebcli
        
    - name: 📦 Create deployment package
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        S3_BUCKET="elasticbeanstalk-us-west-2-$ACCOUNT_ID"
        
        echo "Uploading source to S3 bucket: $S3_BUCKET"
        zip -r deploy-package.zip . -x "*.git*" "node_modules/*" "*.log" "*.tmp"
        
        aws s3 cp deploy-package.zip s3://$S3_BUCKET/radio-importante-backend/deploy-package.zip
        
    - name: 🚀 Deploy to Elastic Beanstalk
      run: |
        # Configurar EB CLI
        if [ ! -d ".elasticbeanstalk" ]; then
          eb init radio-importante-backend --region us-west-2 --platform node.js
        else
          rm -rf .elasticbeanstalk
          eb init radio-importante-backend --region us-west-2 --platform node.js
        fi
        
        # Usar TAG como version-label
        VERSION_LABEL="${{ github.ref_name }}"
        
        # Deploy com version-label da TAG
        if aws elasticbeanstalk describe-environments --environment-names radio-importante-backend-prod --region us-west-2 --query 'Environments[0].Status' --output text 2>/dev/null | grep -q "Ready"; then
          echo "Environment exists and is ready. Creating new version..."
          
          aws elasticbeanstalk create-application-version \
            --application-name radio-importante-backend \
            --version-label $VERSION_LABEL \
            --description "Deploy from TAG $VERSION_LABEL" \
            --source-bundle S3Bucket="elasticbeanstalk-us-west-2-$(aws sts get-caller-identity --query Account --output text)",S3Key="radio-importante-backend/deploy-package.zip" \
            --region us-west-2
          
          # Aguardar criação da versão
          for i in {1..12}; do
            STATUS=$(aws elasticbeanstalk describe-application-versions --application-name radio-importante-backend --version-labels $VERSION_LABEL --region us-west-2 --query 'ApplicationVersions[0].Status' --output text 2>/dev/null || echo "NOTFOUND")
            if [ "$STATUS" = "PROCESSED" ]; then
              echo "Application version $VERSION_LABEL is ready"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "Application version creation failed"
              exit 1
            else
              echo "Waiting for version $VERSION_LABEL to be processed... (attempt $i/12)"
              sleep 10
            fi
          done
          
          if [ "$STATUS" != "PROCESSED" ]; then
            echo "Timeout waiting for application version"
            exit 1
          fi
          
          # Deploy da nova versão
          aws elasticbeanstalk update-environment \
            --environment-name radio-importante-backend-prod \
            --version-label $VERSION_LABEL \
            --region us-west-2
            
          # Aguardar deploy
          aws elasticbeanstalk wait environment-updated --environment-names radio-importante-backend-prod --region us-west-2
          
        else
          echo "Environment does not exist. Creating..."
          eb create radio-importante-backend-prod --instance-type t3.micro --timeout 20 --envvars NODE_ENV=production,AWS_REGION=us-west-2,S3_BUCKET_NAME=radio-importante-storage
        fi
        
    - name: ✅ Verify deployment
      run: |
        URL=$(aws elasticbeanstalk describe-environments --environment-names radio-importante-backend-prod --region us-west-2 --query 'Environments[0].CNAME' --output text 2>/dev/null || echo "")
        
        if [ -z "$URL" ] || [ "$URL" = "None" ]; then
          URL="radio-importante-backend-prod.us-west-2.elasticbeanstalk.com"
        fi
        
        echo "🌐 Backend URL: http://$URL"
        
        # Test health endpoint
        for i in {1..5}; do
          if curl -f "http://$URL/health" > /dev/null 2>&1; then
            echo "✅ Health check passed!"
            break
          else
            echo "⏳ Waiting for backend to be ready... (attempt $i/5)"
            sleep 30
          fi
        done
        
        echo "📋 Deployment Summary:" >> $GITHUB_STEP_SUMMARY
        echo "- 🏗️ **Backend**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
        echo "- 🌐 **URL**: http://$URL" >> $GITHUB_STEP_SUMMARY
        echo "- 🏷️ **Version**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
