# GitHub Actions - Deploy Completo (Frontend + Backend)
name: 🚀 Deploy Complete Stack

on:
  push:
    branches: [main]
  workflow_dispatch: # Permite trigger manual
    inputs:
      deploy_backend:
        description: 'Deploy backend também?'
        required: false
        default: 'true'
        type: boolean
      deploy_frontend:
        description: 'Deploy frontend também?'
        required: false
        default: 'true'
        type: boolean

jobs:
  changes:
    name: 🔍 Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          backend:
            - 'backend/**'
          frontend:
            - 'src/**'
            - 'public/**'
            - 'index.html'
            - 'package.json'
            - 'vite.config.ts'

  deploy-backend:
    name: 🏗️ Deploy Backend
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || github.event.inputs.deploy_backend == 'true'
    defaults:
      run:
        working-directory: ./backend
    outputs:
      backend_url: ${{ steps.get-url.outputs.url }}
        
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: './backend/package-lock.json'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: 🛠️ Install EB CLI
      run: pip install awsebcli
        
    - name: 🚀 Deploy to Elastic Beanstalk
      run: |
        echo "=== Iniciando Deploy Backend ==="
        
        # Configuração AWS
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        S3_BUCKET="elasticbeanstalk-us-west-2-$ACCOUNT_ID"
        VERSION_LABEL="v1.2.1-$(date +%s)"
        
        echo "Account ID: $ACCOUNT_ID"
        echo "S3 Bucket: $S3_BUCKET"
        echo "Version Label: $VERSION_LABEL"
        
        # Limpar e criar package otimizado
        echo "Criando package..."
        rm -f deploy-package.zip
        
        # Criar ZIP com exclusões mais específicas
        zip -r deploy-package.zip . \
          -x "*.git*" \
             "node_modules/*" \
             "*.log" \
             "*.tmp" \
             "*.zip" \
             ".DS_Store" \
             "*.swp" \
             ".env" \
             "test-api.sh" \
             "eb-init.sh" \
             ".elasticbeanstalk/*"
        
        echo "Package criado: $(ls -lh deploy-package.zip | awk '{print $5}')"
        
        # Upload para S3
        echo "Fazendo upload para S3..."
        aws s3 cp deploy-package.zip s3://$S3_BUCKET/radio-importante-backend/deploy-package.zip
        
        # Verificar upload
        if aws s3 ls s3://$S3_BUCKET/radio-importante-backend/deploy-package.zip; then
          echo "✅ Upload para S3 realizado com sucesso"
        else
          echo "❌ Falha no upload para S3"
          exit 1
        fi
        
        # Verificar se application version já existe
        echo "Verificando se versão $VERSION_LABEL já existe..."
        if aws elasticbeanstalk describe-application-versions \
           --application-name radio-importante-backend \
           --version-labels $VERSION_LABEL \
           --region us-west-2 \
           --query 'ApplicationVersions[0].VersionLabel' \
           --output text 2>/dev/null | grep -q "$VERSION_LABEL"; then
          echo "⚠️ Versão $VERSION_LABEL já existe, usando versão existente"
        else
          echo "Criando nova versão da aplicação..."
          aws elasticbeanstalk create-application-version \
            --application-name radio-importante-backend \
            --version-label $VERSION_LABEL \
            --description "Deploy TAG v1.2.1 - $(date)" \
            --source-bundle S3Bucket="$S3_BUCKET",S3Key="radio-importante-backend/deploy-package.zip" \
            --region us-west-2
          
          # Aguardar processamento com timeout maior
          echo "Aguardando processamento da versão..."
          WAIT_COUNT=0
          MAX_WAIT=30
          
          while [ $WAIT_COUNT -lt $MAX_WAIT ]; do
            STATUS=$(aws elasticbeanstalk describe-application-versions \
              --application-name radio-importante-backend \
              --version-labels $VERSION_LABEL \
              --region us-west-2 \
              --query 'ApplicationVersions[0].Status' \
              --output text 2>/dev/null || echo "NOTFOUND")
            
            echo "Status da versão: $STATUS (tentativa $((WAIT_COUNT+1))/$MAX_WAIT)"
            
            if [ "$STATUS" = "PROCESSED" ]; then
              echo "✅ Versão processada com sucesso"
              break
            elif [ "$STATUS" = "FAILED" ]; then
              echo "❌ Falha no processamento da versão"
              # Mostrar detalhes do erro
              aws elasticbeanstalk describe-application-versions \
                --application-name radio-importante-backend \
                --version-labels $VERSION_LABEL \
                --region us-west-2
              exit 1
            fi
            
            WAIT_COUNT=$((WAIT_COUNT+1))
            sleep 10
          done
          
          if [ $WAIT_COUNT -eq $MAX_WAIT ]; then
            echo "❌ Timeout aguardando processamento da versão"
            exit 1
          fi
        fi
        
        # Deploy para o environment
        echo "Fazendo deploy para o environment..."
        aws elasticbeanstalk update-environment \
          --environment-name radio-importante-backend-prod \
          --version-label $VERSION_LABEL \
          --region us-west-2
        
        # Aguardar deploy
        echo "Aguardando deploy completar..."
        aws elasticbeanstalk wait environment-updated \
          --environment-names radio-importante-backend-prod \
          --region us-west-2 \
          --waiter-config maxAttempts=60,delay=30
        
        echo "✅ Deploy concluído com sucesso!"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        
    - name: 🔍 Get backend URL
      id: get-url
      run: |
        echo "Obtendo URL do environment..."
        
        # Usar AWS CLI diretamente para obter a URL
        URL=$(aws elasticbeanstalk describe-environments 
          --environment-names radio-importante-backend-prod 
          --region us-west-2 
          --query 'Environments[0].CNAME' 
          --output text 2>/dev/null || echo "")
        
        if [ -z "$URL" ] || [ "$URL" = "None" ]; then
          echo "❌ Não foi possível obter a URL do environment"
          echo "Tentando obter informações do environment..."
          aws elasticbeanstalk describe-environments 
            --environment-names radio-importante-backend-prod 
            --region us-west-2
          exit 1
        fi
        
        # Adicionar protocolo se não tiver
        if [[ ! "$URL" =~ ^https?:// ]]; then
          URL="http://$URL"
        fi
        
        echo "✅ Backend URL: $URL"
        echo "backend_url=$URL" >> $GITHUB_OUTPUT

  deploy-frontend:
    name: 🎨 Deploy Frontend
    runs-on: ubuntu-latest
    needs: [changes, deploy-backend]
    if: always() && (needs.changes.outputs.frontend == 'true' || github.event.inputs.deploy_frontend == 'true')
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔧 Configure backend URL (if deployed)
      run: |
        if [ -n "${{ needs.deploy-backend.outputs.backend_url }}" ]; then
          echo "Configuring frontend to use backend: ${{ needs.deploy-backend.outputs.backend_url }}"
          # Aqui podemos adicionar lógica para atualizar config do frontend
        fi
      
    - name: 🏗️ Build frontend
      run: npm run build
      
    - name: 🔧 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: 🌐 Deploy to S3
      run: |
        # Use bucket padrão se S3_BUCKET_NAME não estiver definido
        S3_BUCKET="${{ secrets.S3_BUCKET_NAME }}"
        if [ -z "$S3_BUCKET" ]; then
          S3_BUCKET="radio-importante-frontend"
          echo "⚠️ S3_BUCKET_NAME não definido, usando bucket padrão: $S3_BUCKET"
        fi
        
        echo "Deploying to S3 bucket: $S3_BUCKET"
        aws s3 sync dist/ s3://$S3_BUCKET --delete
        
    - name: 🔄 Invalidate CloudFront (if exists)
      run: |
        if [ -n "${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
        fi
      continue-on-error: true

  test-integration:
    name: 🧪 Integration Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always() && needs.deploy-backend.result == 'success'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🧪 Test backend health
      run: |
        BACKEND_URL="${{ needs.deploy-backend.outputs.backend_url }}"
        echo "Testing backend at: $BACKEND_URL"
        
        # Health check
        curl -f "$BACKEND_URL/health"
        
        # API endpoints
        curl -f "$BACKEND_URL/api/catalog"
        
        echo "✅ All backend tests passed!"
        
    - name: 🌐 Test frontend
      run: |
        # Use bucket padrão se S3_BUCKET_NAME não estiver definido
        S3_BUCKET="${{ secrets.S3_BUCKET_NAME }}"
        if [ -z "$S3_BUCKET" ]; then
          S3_BUCKET="radio-importante-frontend"
          echo "⚠️ S3_BUCKET_NAME não definido, usando bucket padrão: $S3_BUCKET"
        fi
        
        FRONTEND_URL="https://$S3_BUCKET.s3-website-us-west-2.amazonaws.com"
        echo "Testing frontend at: $FRONTEND_URL"
        
        # Test if frontend is accessible
        curl -f "$FRONTEND_URL" | head -n 20
        
        echo "✅ Frontend deployment successful!"

  notify:
    name: 📢 Notify Success
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, test-integration]
    if: always()
    
    steps:
    - name: 📊 Deployment Summary
      run: |
        echo "## 🚀 Deployment Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Backend" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.deploy-backend.result }}" == "success" ]; then
          echo "- ✅ **Backend**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 **URL**: ${{ needs.deploy-backend.outputs.backend_url }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⏭️ **Backend**: Skipped or failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Frontend" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.deploy-frontend.result }}" == "success" ]; then
          echo "- ✅ **Frontend**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
          # Use bucket padrão se S3_BUCKET_NAME não estiver definido
          S3_BUCKET="${{ secrets.S3_BUCKET_NAME }}"
          if [ -z "$S3_BUCKET" ]; then
            S3_BUCKET="radio-importante-frontend"
          fi
          echo "- 🌐 **URL**: https://$S3_BUCKET.s3-website-us-west-2.amazonaws.com" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⏭️ **Frontend**: Skipped or failed" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tests" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.test-integration.result }}" == "success" ]; then
          echo "- ✅ **Integration tests**: All passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ⚠️ **Integration tests**: Some issues detected" >> $GITHUB_STEP_SUMMARY
        fi
