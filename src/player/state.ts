// src/player/state.ts - Gerenciamento de estado do player

export interface Track {
  id: string;
  title: string;
  artist: string;
  filename: string;        // Nome original com acentos para exibi√ß√£o
  safeFilename?: string;   // Nome sanitizado para URLs (opcional, ser√° gerado automaticamente)
  duration: number;
  format: string;
}

export interface Catalog {
  version: string;
  tracks: Track[];
  metadata: {
    totalTracks: number;
    totalDuration: number;
    artwork: string;
    radioName: string;
  };
}

export interface PlayerState {
  isPlaying: boolean;
  isLoading: boolean;
  currentTrackIndex: number;
  currentTime: number;
  duration: number;
  volume: number;
  error: string | null;
}

export class StateManager {
  private catalog: Catalog | null = null;
  private state: PlayerState;
  private listeners: Array<(state: PlayerState) => void> = [];

  constructor() {
    this.state = {
      isPlaying: false,
      isLoading: false,
      currentTrackIndex: 0,
      currentTime: 0,
      duration: 0,
      volume: 1,
      error: null,
    };

    // Escutar atualiza√ß√µes do admin via BroadcastChannel
    this.setupCatalogUpdateListeners();
  }

  private setupCatalogUpdateListeners(): void {
    try {
      // BroadcastChannel para comunica√ß√£o entre admin e player
      if (typeof BroadcastChannel !== 'undefined') {
        const channel = new BroadcastChannel('radio-importante-updates');
        channel.addEventListener('message', (event) => {
          if (event.data?.type === 'catalog-updated') {
            console.log('üì° Recebido sinal de atualiza√ß√£o do cat√°logo do admin');
            this.reloadCatalog();
          }
        });
      }

      // Backup: polling localStorage para detectar mudan√ßas
      let lastUpdate = localStorage.getItem('catalog-updated') || '0';
      setInterval(() => {
        const currentUpdate = localStorage.getItem('catalog-updated') || '0';
        if (currentUpdate !== lastUpdate && currentUpdate !== '0') {
          console.log('üîÑ Detectada atualiza√ß√£o do cat√°logo via localStorage');
          lastUpdate = currentUpdate;
          this.reloadCatalog();
        }
      }, 2000); // Verifica a cada 2 segundos

    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao configurar listeners de atualiza√ß√£o:', error);
    }
  }

  private async reloadCatalog(): Promise<void> {
    try {
      console.log('üîÑ Recarregando cat√°logo...');
      
      // Detectar ambiente
      const isProduction = window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1';
      
      // Tentar API do backend apropriado para o ambiente
      let response;
      try {
        if (isProduction) {
          // Em produ√ß√£o, usar apenas backend de produ√ß√£o
          response = await fetch('http://radio-importante-backend-prod.eba-heipfui9.us-west-2.elasticbeanstalk.com/api/catalog');
        } else {
          // Em desenvolvimento, usar apenas backend local
          response = await fetch('http://localhost:8080/api/catalog');
        }
        
        if (response.ok) {
          const apiResult = await response.json();
          this.catalog = apiResult;
          console.log('‚úÖ Cat√°logo recarregado via API backend');
        } else {
          throw new Error('API n√£o dispon√≠vel');
        }
      } catch {
        console.log('‚ö†Ô∏è API backend n√£o dispon√≠vel, usando arquivo local');
        const timestamp = Date.now();
        response = await fetch(`/data/catalog.json?t=${timestamp}`, {
          cache: 'no-cache',
          headers: {
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0'
          }
        });
        
        if (response.ok) {
          this.catalog = await response.json();
        }
      }
        
        // Regenerar safeFilenames
        if (this.catalog?.tracks) {
          this.catalog.tracks.forEach(track => {
            track.safeFilename = track.filename; // Usar filename direto (j√° sanitizado no admin)
          });
        }
        
        console.log(`‚úÖ Cat√°logo recarregado: ${this.catalog?.tracks?.length || 0} faixas`);
        
        // Notificar listeners sobre a atualiza√ß√£o
        this.notifyListeners();
    } catch (error) {
      console.error('‚ùå Erro ao recarregar cat√°logo:', error);
    }
  }

  // Fun√ß√£o para sanitizar nomes de arquivos (remove acentos e caracteres problem√°ticos)
  private sanitizeFilename(filename: string): string {
    // Mapa de caracteres acentuados para ASCII
    const accentMap: { [key: string]: string } = {
      '√°': 'a', '√†': 'a', '√£': 'a', '√¢': 'a', '√§': 'a', '√•': 'a',
      '√©': 'e', '√®': 'e', '√™': 'e', '√´': 'e',
      '√≠': 'i', '√¨': 'i', '√Æ': 'i', '√Ø': 'i',
      '√≥': 'o', '√≤': 'o', '√µ': 'o', '√¥': 'o', '√∂': 'o',
      '√∫': 'u', '√π': 'u', '√ª': 'u', '√º': 'u',
      '√ß': 'c', '√±': 'n',
      '√Å': 'A', '√Ä': 'A', '√É': 'A', '√Ç': 'A', '√Ñ': 'A', '√Ö': 'A',
      '√â': 'E', '√à': 'E', '√ä': 'E', '√ã': 'E',
      '√ç': 'I', '√å': 'I', '√é': 'I', '√è': 'I',
      '√ì': 'O', '√í': 'O', '√ï': 'O', '√î': 'O', '√ñ': 'O',
      '√ö': 'U', '√ô': 'U', '√õ': 'U', '√ú': 'U',
      '√á': 'C', '√ë': 'N'
    };

    return filename
      // Converter acentos para ASCII
      .replace(/[√°√†√£√¢√§√•√©√®√™√´√≠√¨√Æ√Ø√≥√≤√µ√¥√∂√∫√π√ª√º√ß√±√Å√Ä√É√Ç√Ñ√Ö√â√à√ä√ã√ç√å√é√è√ì√í√ï√î√ñ√ö√ô√õ√ú√á√ë]/g, 
        char => accentMap[char] || char)
      // CORRE√á√ÉO: Remover v√≠rgulas e outros caracteres problem√°ticos
      // Substituir v√≠rgulas por h√≠fen para manter legibilidade
      .replace(/,/g, ' -')
      // Remover outros caracteres problem√°ticos (manter apenas alfanum√©ricos, espa√ßos, h√≠fens, pontos e par√™nteses)
      .replace(/[^a-zA-Z0-9\s\-.()[\]]/g, '')
      // Remover espa√ßos extras e m√∫ltiplos h√≠fens
      .replace(/\s+/g, ' ')
      .replace(/-+/g, '-')
      .trim();
  }

  // Nova fun√ß√£o para limpeza AGRESSIVA de nomes (para usar na interface admin)
  public static cleanFilenameForUpload(filename: string): string {
    const nameWithoutExt = filename.replace(/\.[^/.]+$/, ''); // Remove extens√£o
    const extension = filename.slice(nameWithoutExt.length); // Pega extens√£o
    
    const cleaned = nameWithoutExt
      // Converter acentos
      .normalize('NFD').replace(/[\u0300-\u036f]/g, '')
      // V√≠rgulas vira h√≠fen
      .replace(/,/g, '-')
      // Espa√ßos viram underline (mais seguro para URLs)
      .replace(/\s+/g, '_')
      // Remover caracteres especiais exceto h√≠fen e underscore
      .replace(/[^a-zA-Z0-9\-_]/g, '')
      // Limpar m√∫ltiplos separadores
      .replace(/[-_]+/g, '_')
      // Remover separadores do in√≠cio/fim
      .replace(/^[-_]+|[-_]+$/g, '');
    
    return cleaned + extension;
  }

  // Carrega o cat√°logo de m√∫sicas
  public async loadCatalog(): Promise<Catalog> {
    try {
      console.log('üìÇ Carregando cat√°logo via API...');
      
      // Detectar ambiente
      const isProduction = window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1';
      
      // Tentar API do backend apropriado para o ambiente
      let response;
      try {
        if (isProduction) {
          // Em produ√ß√£o, usar apenas backend de produ√ß√£o
          response = await fetch('http://radio-importante-backend-prod.eba-heipfui9.us-west-2.elasticbeanstalk.com/api/catalog');
        } else {
          // Em desenvolvimento, usar apenas backend local
          response = await fetch('http://localhost:8080/api/catalog');
        }
        
        if (response.ok) {
          const apiResult = await response.json();
          this.catalog = apiResult; // Backend retorna o cat√°logo diretamente
          console.log('‚úÖ Cat√°logo carregado via API backend');
        } else {
          throw new Error('API n√£o dispon√≠vel');
        }
      } catch {
        console.log('‚ö†Ô∏è API backend n√£o dispon√≠vel, usando arquivo local');
        response = await fetch('/data/catalog.json');
        if (!response.ok) {
          throw new Error(`Erro ao carregar cat√°logo: ${response.status}`);
        }
        this.catalog = await response.json();
      }
      
      if (!this.catalog || !this.catalog.tracks || !Array.isArray(this.catalog.tracks)) {
        throw new Error('Cat√°logo inv√°lido');
      }
      
      // CORRE√á√ÉO: N√£o sanitizar novamente arquivos j√° limpos no upload
      // Os arquivos do cat√°logo j√° foram sanitizados no admin, usar filename direto
      this.catalog.tracks.forEach(track => {
        if (!track.safeFilename) {
          track.safeFilename = track.filename; // Usar filename original do cat√°logo
          console.log(`üîß Usando filename direto: "${track.filename}"`);
        }
      });
      
      console.log(`‚úÖ Cat√°logo carregado: ${this.catalog.tracks.length} faixas`);
      
      return this.catalog;
    } catch (error) {
      console.error('‚ùå Erro ao carregar cat√°logo:', error);
      throw new Error(`Falha ao carregar cat√°logo: ${error}`);
    }
  }

  // Getter para o cat√°logo
  public getCatalog(): Catalog | null {
    return this.catalog;
  }

  // Getter para faixa atual
  public getCurrentTrack(): Track | null {
    if (!this.catalog || this.state.currentTrackIndex >= this.catalog.tracks.length) {
      return null;
    }
    return this.catalog.tracks[this.state.currentTrackIndex];
  }

  // Getter para dados de exibi√ß√£o da faixa atual (sempre com nomes originais)
  public getCurrentTrackDisplay(): { title: string; artist: string; filename: string } | null {
    const track = this.getCurrentTrack();
    if (!track) {
      return null;
    }
    
    return {
      title: track.title,
      artist: track.artist,
      filename: track.filename // Nome original com acentos para exibi√ß√£o
    };
  }

  // Getter para URL da faixa atual com fallback
  public getCurrentTrackUrl(): string | null {
    const track = this.getCurrentTrack();
    if (!track) {
      return null;
    }
    
    // Primeiro tentar o nome sanitizado, depois o original
    const filenameForUrl = track.safeFilename || track.filename;
    
    // Aplicar encoding b√°sico apenas para espa√ßos e caracteres especiais restantes
    const sanitizedUrl = `/audio/${filenameForUrl.replace(/ /g, '%20').replace(/&/g, '%26').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/,/g, '%2C')}`;
    
    console.log('üîó Filename original (exibi√ß√£o):', track.filename);
    console.log('üîó Filename sanitizado (URL):', filenameForUrl);
    console.log('üîó URL final:', sanitizedUrl);
    
    return sanitizedUrl;
  }

  // M√©todo alternativo que retorna m√∫ltiplas URLs para tentar
  public getCurrentTrackUrls(): string[] {
    const track = this.getCurrentTrack();
    if (!track) {
      return [];
    }
    
    const urls: string[] = [];
    
    // 1. Tentar nome sanitizado se dispon√≠vel
    if (track.safeFilename && track.safeFilename !== track.filename) {
      const sanitizedUrl = `/audio/${track.safeFilename.replace(/ /g, '%20').replace(/&/g, '%26').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/,/g, '%2C')}`;
      urls.push(sanitizedUrl);
    }
    
    // 2. Tentar nome original com encoding b√°sico
    const originalUrl = `/audio/${track.filename.replace(/ /g, '%20').replace(/&/g, '%26').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/,/g, '%2C')}`;
    urls.push(originalUrl);
    
    // 3. Tentar nome original sem encoding (√∫ltico recurso)
    urls.push(`/audio/${track.filename}`);
    
    console.log('üîó URLs para tentar:', urls);
    return urls;
  }

  // Navegar para pr√≥xima faixa
  public nextTrack(): boolean {
    if (!this.catalog) {
      return false;
    }

    const nextIndex = this.state.currentTrackIndex + 1;
    if (nextIndex >= this.catalog.tracks.length) {
      // Volta para o in√≠cio (loop)
      this.updateState({ currentTrackIndex: 0 });
      return true;
    }

    this.updateState({ currentTrackIndex: nextIndex });
    return true;
  }

  // Navegar para faixa anterior
  public previousTrack(): boolean {
    if (!this.catalog) {
      return false;
    }

    const prevIndex = this.state.currentTrackIndex - 1;
    if (prevIndex < 0) {
      // Vai para a √∫ltima faixa
      this.updateState({ currentTrackIndex: this.catalog.tracks.length - 1 });
      return true;
    }

    this.updateState({ currentTrackIndex: prevIndex });
    return true;
  }

  // Ir para uma faixa espec√≠fica
  public goToTrack(index: number): boolean {
    if (!this.catalog || index < 0 || index >= this.catalog.tracks.length) {
      return false;
    }

    this.updateState({ currentTrackIndex: index });
    return true;
  }

  // Atualizar estado
  public updateState(newState: Partial<PlayerState>): void {
    const oldState = { ...this.state };
    this.state = { ...this.state, ...newState };

    // Log apenas mudan√ßas significativas
    if (oldState.isPlaying !== this.state.isPlaying) {
      console.log(`üéµ Estado: ${this.state.isPlaying ? 'Tocando' : 'Pausado'}`);
    }

    if (oldState.currentTrackIndex !== this.state.currentTrackIndex) {
      const track = this.getCurrentTrack();
      console.log(`üìÄ Faixa: ${track?.title} - ${track?.artist}`);
    }

    if (oldState.error !== this.state.error && this.state.error) {
      console.error('‚ùå Erro:', this.state.error);
    }

    // Notificar listeners
    this.notifyListeners();
  }

  // Getter para o estado
  public getState(): PlayerState {
    return { ...this.state };
  }

  // Adicionar listener para mudan√ßas de estado
  public addStateListener(listener: (state: PlayerState) => void): void {
    this.listeners.push(listener);
  }

  // Remover listener
  public removeStateListener(listener: (state: PlayerState) => void): void {
    const index = this.listeners.indexOf(listener);
    if (index > -1) {
      this.listeners.splice(index, 1);
    }
  }

  // Notificar todos os listeners
  private notifyListeners(): void {
    this.listeners.forEach(listener => {
      try {
        listener(this.state);
      } catch (error) {
        console.error('‚ùå Erro no listener de estado:', error);
      }
    });
  }

  // Persistir estado no localStorage
  public saveState(): void {
    try {
      const stateToSave = {
        currentTrackIndex: this.state.currentTrackIndex,
        currentTime: this.state.currentTime,
        volume: this.state.volume,
      };

      localStorage.setItem('radioImportante:playerState', JSON.stringify(stateToSave));
    } catch (error) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel salvar estado:', error);
    }
  }

  // Restaurar estado do localStorage
  public loadState(): void {
    try {
      const saved = localStorage.getItem('radioImportante:playerState');
      if (saved) {
        const parsedState = JSON.parse(saved);
        
        // Validar os dados antes de aplicar
        if (typeof parsedState.currentTrackIndex === 'number' && parsedState.currentTrackIndex >= 0) {
          this.state.currentTrackIndex = parsedState.currentTrackIndex;
        }
        
        if (typeof parsedState.currentTime === 'number' && parsedState.currentTime >= 0) {
          this.state.currentTime = parsedState.currentTime;
        }
        
        if (typeof parsedState.volume === 'number' && parsedState.volume >= 0 && parsedState.volume <= 1) {
          this.state.volume = parsedState.volume;
        }

        console.log('‚úÖ Estado restaurado do localStorage');
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è N√£o foi poss√≠vel carregar estado salvo:', error);
    }
  }

  // Limpar estado salvo
  public clearSavedState(): void {
    try {
      localStorage.removeItem('radioImportante:playerState');
      console.log('üóëÔ∏è Estado salvo removido');
    } catch (error) {
      console.warn('‚ö†Ô∏è Erro ao limpar estado salvo:', error);
    }
  }

  // Debug: Imprimir informa√ß√µes do estado
  public debug(): void {
    console.log('üîç Debug do Estado:', {
      catalog: this.catalog ? `${this.catalog.tracks.length} faixas` : 'n√£o carregado',
      currentTrack: this.getCurrentTrack(),
      state: this.state,
      listeners: this.listeners.length,
    });
  }
}
